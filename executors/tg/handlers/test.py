

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from modules.logs import executors_logger as logger
from modules.executors_manager import manager
from aiogram import F
from aiogram.filters import Command
from datetime import datetime, timedelta

from global_modules.api_client import APIClient

client_executor = manager.get("telegram_executor")
dp: Dispatcher = client_executor.dp

api = APIClient('http://executors:8003')
calendar_api = APIClient('http://calendar:8001')

@dp.message(Command('send_to_me'))
async def send_to_me(message: Message):

    data = {
        'executor_name': 'telegram_executor',
        'chat_id': message.chat.id,
        'text': f'Hello, {message.from_user.full_name}! This is a test message from /send_to_me command.'
    }

    await api.post('/test/send-message', data=data)


@dp.message(Command('create_event'))
async def create_calendar_event(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å –∑–∞–≤—Ç—Ä–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_event –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        command_text = message.text
        if not command_text or len(command_text.split(' ', 1)) < 2:
            await message.reply(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è!\n"
                "–ü—Ä–∏–º–µ—Ä: /create_event –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞"
            )
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤—Å–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã)
        event_title = command_text.split(' ', 1)[1].strip()
        
        if not event_title:
            await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞—Ç—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ (–≤–µ—Å—å –¥–µ–Ω—å)
        tomorrow = datetime.now() + timedelta(days=1)
        tomorrow_start = tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        event_data = {
            'title': event_title,
            'description': f'–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name} —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞',
            'start_time': tomorrow_start.isoformat() + 'Z',
            'all_day': True,
            'location': '',
            'attendees': []
        }
        
        logger.info(f"Creating calendar event: {event_title} for user {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Calendar API
        response_data, status_code = await calendar_api.post('/calendar/events', data=event_data)
        
        if status_code == 200 and response_data and response_data.get('success'):
            event_id = response_data.get('data', {}).get('id', 'unknown')
            await message.reply(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
                f"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {event_title}\n"
                f"üóì –î–∞—Ç–∞: {tomorrow_start.strftime('%d.%m.%Y')} (–≤–µ—Å—å –¥–µ–Ω—å)\n"
                f"üÜî ID —Å–æ–±—ã—Ç–∏—è: {event_id[:20]}..."
            )
            logger.info(f"Calendar event created successfully: {event_id}")
        else:
            error_detail = response_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response_data else f'HTTP {status_code}'
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è!\n"
                f"–°—Ç–∞—Ç—É—Å: {status_code}\n"
                f"–î–µ—Ç–∞–ª–∏: {error_detail}"
            )
            logger.error(f"Failed to create calendar event: {status_code} - {error_detail}")
            
    except Exception as e:
        logger.error(f"Error in create_calendar_event handler: {e}")
        await message.reply(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )


@dp.message(Command('events_tomorrow'))
async def get_tomorrow_events(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /events_tomorrow
    """
    try:
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞
        tomorrow = datetime.now() + timedelta(days=1)
        tomorrow_start = tomorrow.replace(hour=0, minute=0, second=0, microsecond=0)
        tomorrow_end = tomorrow_start + timedelta(days=1)
        
        logger.info(f"Getting tomorrow events for user {message.from_user.id}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        response_data, status_code = await calendar_api.get('/calendar/events', params={
            'time_min': tomorrow_start.isoformat() + 'Z',
            'time_max': tomorrow_end.isoformat() + 'Z',
            'max_results': 20
        })
        
        if status_code == 200 and response_data and response_data.get('success'):
            events = response_data.get('data', [])
            count = response_data.get('count', 0)
            
            if count == 0:
                await message.reply(
                    f"üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {tomorrow_start.strftime('%d.%m.%Y')}\n\n"
                    "üö´ –ù–∞ –∑–∞–≤—Ç—Ä–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
                )
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
                events_text = f"üìÖ –°–æ–±—ã—Ç–∏—è –Ω–∞ {tomorrow_start.strftime('%d.%m.%Y')} ({count} —à—Ç.)\n\n"
                
                for i, event in enumerate(events[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–æ–±—ã—Ç–∏–π
                    title = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    start = event.get('start', {})
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
                    if 'date' in start:
                        time_info = "–≤–µ—Å—å –¥–µ–Ω—å"
                    elif 'dateTime' in start:
                        try:
                            event_time = datetime.fromisoformat(start['dateTime'].replace('Z', '+00:00'))
                            time_info = event_time.strftime('%H:%M')
                        except:
                            time_info = "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    else:
                        time_info = "–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                    
                    location = event.get('location', '')
                    location_text = f" üìç {location}" if location else ""
                    
                    events_text += f"{i}. üìù {title}\n   ‚è∞ {time_info}{location_text}\n\n"
                
                if count > 10:
                    events_text += f"... –∏ –µ—â–µ {count - 10} —Å–æ–±—ã—Ç–∏–π"
                
                await message.reply(events_text)
                
            logger.info(f"Successfully retrieved {count} tomorrow events")
        else:
            error_detail = response_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if response_data else f'HTTP {status_code}'
            await message.reply(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π!\n"
                f"–°—Ç–∞—Ç—É—Å: {status_code}\n"
                f"–î–µ—Ç–∞–ª–∏: {error_detail}"
            )
            logger.error(f"Failed to get tomorrow events: {status_code} - {error_detail}")
            
    except Exception as e:
        logger.error(f"Error in get_tomorrow_events handler: {e}")
        await message.reply(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π!\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )