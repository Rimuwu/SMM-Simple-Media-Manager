from tg.oms import Page
from tg.oms.utils import callback_generator
from modules.api_client import get_cards, brain_api
from global_modules.classes.enums import CardStatus, UserRole
from tg.scenes.edit.task_scene import TaskScene
from tg.oms.manager import scene_manager

class TaskDetailPage(Page):
    __page_name__ = 'task-detail'

    async def data_preparate(self) -> None:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        await self.load_task_details()

    async def content_worker(self) -> str:
        return self.content

    async def load_task_details(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        self.clear_content()
        
        task_id = self.scene.data['scene'].get('selected_task')
        if not task_id:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        tasks = await get_cards(card_id=task_id)
        if not tasks:
            return
        
        task = tasks[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_names = {
            CardStatus.pass_: "‚è≥ –°–æ–∑–¥–∞–Ω–æ",
            CardStatus.edited: "‚úèÔ∏è –í —Ä–∞–±–æ—Ç–µ",
            CardStatus.review: "üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", 
            CardStatus.ready: "‚úÖ –ì–æ—Ç–æ–≤–∞"
        }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        add_vars = {
            'task_name': task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            'task_description': task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
            'status': status_names.get(task.get('status'), task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ü–µ–Ω—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        await self.scene.update_key('scene', 'current_task_data', task)
        
        self.content = self.append_variables(**add_vars)

    async def buttons_worker(self) -> list[dict]:
        result = await super().buttons_worker()

        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π
        action_buttons = [
        ]

        role = self.scene.data['scene'].get('user_role')
        is_admin = role == UserRole.admin
        if role == UserRole.admin or is_admin:
            action_buttons.extend([
                ('assign_executor', 'üë∑ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'),
                ('delete', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É'),
                ('change_deadline', '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω')
            ])

        if role == UserRole.copywriter or is_admin:
            action_buttons.extend([
                ('open_task', 'üìÇ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É')
            ])

        if role == UserRole.editor or is_admin:
            action_buttons.extend([
                ('start_check', 'üîé –ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        for action_key, action_name in action_buttons:
            result.append({
                'text': action_name,
                'callback_data': callback_generator(
                    self.scene.__scene_name__, 
                    'task_action',
                    action_key
                )
            })

        return result

    @Page.on_callback('task_action')
    async def task_action_handler(self, callback, args):
        action = args[1]

        if action == 'open_task':
            await self.scene.end()
            edit_scene: TaskScene = scene_manager.create_scene(
                self.scene.user_id, TaskScene, 
                self.scene.__bot__
            ) # type: ignore
            edit_scene.set_taskid(
                self.scene.data['scene'].get('selected_task')
                )

            await edit_scene.start()

        elif action == 'delete':
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
            task = self.scene.data['scene'].get('current_task_data')
            if not task:
                return

            card_id = task.get('card_id')
            if not card_id:
                return

            res, status = await brain_api.delete(
                f'/card/delete/{card_id}',
            )

            if status == 200:
                await self.scene.update_key(
                    'scene', 'selected_task', None)
                await self.scene.update_page('task-list')