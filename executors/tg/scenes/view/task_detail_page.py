from tg.oms import Page
from tg.oms.utils import callback_generator
from modules.api_client import get_cards, brain_api
from global_modules.classes.enums import CardStatus

class TaskDetailPage(Page):
    __page_name__ = 'task-detail'

    async def data_preparate(self) -> None:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        await self.load_task_details()

    async def content_worker(self) -> str:
        return self.content

    async def load_task_details(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ"""
        self.clear_content()
        
        task_id = self.scene.data['scene'].get('selected_task')
        if not task_id:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
        tasks = await get_cards(card_id=task_id)
        if not tasks:
            return
        
        task = tasks[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        status_names = {
            CardStatus.pass_: "‚è≥ –ù–∞–∑–Ω–∞—á–µ–Ω–∞",
            CardStatus.edited: "‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞",
            CardStatus.review: "üîç –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", 
            CardStatus.ready: "‚úÖ –ì–æ—Ç–æ–≤–∞"
        }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
        add_vars = {
            'task_name': task.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
            'task_description': task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
            'status': status_names.get(task.get('status'), task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ü–µ–Ω—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        await self.scene.update_key('scene', 'current_task_data', task)
        
        self.content = self.append_variables(**add_vars)

    async def buttons_worker(self) -> list[dict]:
        result = await super().buttons_worker()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–µ–π
        action_buttons = [
            ('edit_task', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'),
            ('change_status', 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å'),
            ('assign_executor', 'ÔøΩ –ù–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'),
            ('add_comment', 'üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'),
            ('view_history', 'üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        for action_key, action_name in action_buttons:
            result.append({
                'text': action_name,
                'callback_data': callback_generator(
                    self.scene.__scene_name__, 
                    'task_action',
                    action_key
                )
            })

        return result

    @Page.on_callback('task_action')
    async def task_action_handler(self, callback, args):
        action = args[0]
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
        action_messages = {
            'edit_task': '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'change_status': 'ÔøΩ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'assign_executor': 'üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'add_comment': 'üí¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)',
            'view_history': 'üìã –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)'
        }
        
        message = action_messages.get(action, '–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥–ª—É—à–∫–µ
        await callback.answer(message, show_alert=True)