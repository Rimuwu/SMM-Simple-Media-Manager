from tg.oms import Page
from tg.oms.utils import callback_generator
from global_modules.classes.enums import UserRole

class FilterSelectionPage(Page):
    __page_name__ = 'filter-selection'

    async def data_preparate(self) -> None:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if not self.scene.data['scene'].get('user_role'):
            from executors.modules.api_client import get_user_role
            telegram_id = self.scene.user_id
            user_role = await get_user_role(telegram_id)
            await self.scene.update_key('scene', 'user_role', user_role or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')

    async def buttons_worker(self) -> list[dict]:
        result = await super().buttons_worker()
        
        user_role = self.scene.data['scene'].get('user_role')
        
        # –§–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_role == UserRole.admin:
            filters = [
                ('my-tasks', 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏'),
                ('all-tasks', 'üìÅ –í—Å–µ –∑–∞–¥–∞—á–∏'), 
                ('created-by-me', '‚ûï –°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π'),
                ('for-review', '‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –º–Ω–æ–π')
            ]
        elif user_role == UserRole.copywriter:
            filters = [
                ('my-tasks', 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏')
            ]
        elif user_role == UserRole.editor:
            filters = [
                ('my-tasks', 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏'),
                ('for-review', '‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –º–Ω–æ–π')
            ]
        elif user_role == UserRole.customer:
            filters = [
                ('created-by-me', '‚ûï –°–æ–∑–¥–∞–Ω–Ω—ã–µ –º–Ω–æ–π')
            ]
        else:
            filters = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        for filter_key, filter_name in filters:
            result.append({
                'text': filter_name,
                'callback_data': callback_generator(
                    self.scene.__scene_name__, 
                    'select_filter', 
                    filter_key
                )
            })

        return result

    @Page.on_callback('select_filter')
    async def select_filter_handler(self, callback, args):
        filter_type = args[1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await self.scene.update_key('scene', 'selected_filter', filter_type)
        await self.scene.update_key('scene', 'current_page', 0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await self.scene.update_page('task-list')
        await self.scene.update_message()