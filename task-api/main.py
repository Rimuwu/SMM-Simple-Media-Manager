
import asyncio
import os
from kaiten_client import KaitenClient
from kaiten_client.models.checklist_item import ChecklistItem
from pprint import pprint
from dotenv import load_dotenv

load_dotenv()

KAITEN_DOMAIN=os.getenv("KAITEN_DOMAIN")
KAITEN_TOKEN=os.getenv("KAITEN_TOKEN")

async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Kaiten API –∫–ª–∏–µ–Ω—Ç–∞")

    async with KaitenClient(KAITEN_TOKEN, KAITEN_DOMAIN) as client:
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –æ–±–ª–∞—Å—Ç—å (–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ)
        print("\nüìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤...")
        spaces = await client.get_spaces()
        if not spaces:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤")
            return
        
        space = spaces[0]
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {space.title} (ID: {space.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å–∫—É –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        print("\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å–æ–∫...")
        boards = await space.get_boards()
        if not boards:
            print("‚ùå –ù–µ—Ç –¥–æ—Å–æ–∫ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ")
            return
        
        board = boards[0]
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å–∫—É: {board.title} (ID: {board.id})")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –¥–æ—Å–∫–∏
        print("\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫...")
        columns = await board.get_columns()
        if not columns:
            print("‚ùå –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ –≤ –¥–æ—Å–∫–µ")
            return
        
        column = columns[0]
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–æ–Ω–∫—É: {column.title} (ID: {column.id})")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        print("\nüéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
        card = await client.create_card(
            board_id=board.id,
            title="–ö–∞—Ä—Ç–æ—á–∫–∞ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º",
            column_id=column.id,
            description="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏"
        )
        print(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {card.title} (ID: {card.id})")
        
        # –°–æ–∑–¥–∞–µ–º —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        print("\n‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞...")
        checklist = await card.create_checklist(
            name="–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏",
            sort_order=1.0
        )
        print(f"‚úÖ –ß–µ–∫-–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {checklist.name} (ID: {checklist.id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —á–µ–∫-–ª–∏—Å—Ç
        print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —á–µ–∫-–ª–∏—Å—Ç...")
        
        items_to_add = [
            {"text": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π", "sort_order": 1.0},
            {"text": "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", "sort_order": 2.0},
            {"text": "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "sort_order": 3.0, "due_date": "2025-09-10"},
            {"text": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "sort_order": 4.0},
            {"text": "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", "sort_order": 5.0, "checked": False},
            {"text": "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", "sort_order": 6.0, "checked": True},
            {"text": "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ", "sort_order": 7.0, "checked": False}
        ]
        
        created_items = []
        for item_data in items_to_add:
            item = await checklist.add_item(**item_data)
            created_items.append(item)
            print(f"  ‚úì –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item.text}")
        
        # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
        print("\n‚úîÔ∏è –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π...")
        first_item: ChecklistItem = created_items[0]
        await first_item.toggle_checked()
        print(f"  ‚úÖ –≠–ª–µ–º–µ–Ω—Ç '{first_item.text}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ–∫-–ª–∏—Å—Ç–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–∞...")
        await checklist.refresh()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç–∞
        stats = checklist.get_completion_stats()
        print(f"  üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['completed']}/{stats['total']} ({stats['percentage']}%)")
        print(f"  üéØ –ó–∞–≤–µ—Ä—à–µ–Ω: {'–î–∞' if checklist.is_completed() else '–ù–µ—Ç'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏
        print("\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏...")
        all_checklists = await card.get_checklists()
        print(f"  üîç –ù–∞–π–¥–µ–Ω–æ —á–µ–∫-–ª–∏—Å—Ç–æ–≤: {len(all_checklists)}")
        
        if all_checklists:
            for cl in all_checklists:
                stats = cl.get_completion_stats()
                print(f"  üìã {cl.name}: {stats['completed']}/{stats['total']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print("  ‚ÑπÔ∏è –ß–µ–∫-–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            print("  üîÑ –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å —á–µ–∫-–ª–∏—Å—Ç–∞–º–∏
            updated_card = await client.get_card(card.id, additional_fields='checklists')
            if hasattr(updated_card, '_data') and 'checklists' in updated_card._data:
                print(f"  üìä –í –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: {len(updated_card._data.get('checklists', []))} —á–µ–∫-–ª–∏—Å—Ç–æ–≤")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —á–µ–∫-–ª–∏—Å—Ç–∞
        print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        second_item = created_items[1]
        await second_item.update(text="–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        print(f"  ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: {second_item.text}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        third_item = created_items[4]
        await third_item.set_due_date("2025-09-25")
        print(f"  üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ä–æ–∫ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ '{third_item.text}': {third_item.due_date}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        overdue_items = checklist.get_overdue_items()
        if overdue_items:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(overdue_items)}")
            for item in overdue_items:
                print(f"  ‚è∞ {item['text']} (—Å—Ä–æ–∫: {item['due_date']})")
        else:
            print("\n‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç")
        
        print(f"\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö–∞—Ä—Ç–æ—á–∫–∞ ID: {card.id}, –ß–µ–∫-–ª–∏—Å—Ç ID: {checklist.id}")
        print("üìã –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —á–µ–∫-–ª–∏—Å—Ç–æ–º")


if __name__ == "__main__":
    asyncio.run(main())